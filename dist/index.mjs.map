{"version":3,"sources":["../src/consts.ts","../src/keyPressHandler.ts","../src/registry.ts","../src/screen.ts","../src/index.ts"],"sourcesContent":["export const CTRL_C = '\\u0003';\nexport const CTRL_L = '\\u000C';\nexport const CTRL_D = '\\u0004';\nexport const ESC = 'ESC';\n\nexport const clear = (): void => {\n   process.stdout.write(process.platform === 'win32' ? '\\x1B[2J\\x1B[0f' : '\\x1B[2J\\x1B[3J\\x1B[H');\n}","import { CTRL_C } from \"./consts\";\n\nexport class KeyPressHandler {\n    private isIntercepting: boolean = false;\n    private isHandlingKeyPress: boolean = false;\n\n    constructor(public onPress: (key: string) => Promise<any>) { }\n\n    /** Start observing interaction pause listeners. */\n    createInteractionListener() {\n        // Support observing prompts\n        let wasIntercepting = false;\n\n        const listener = ({ pause }: { pause: boolean }) => {\n            if (pause) {\n                wasIntercepting = this.isIntercepting;\n                this.stopIntercepting();\n            } else if (wasIntercepting) {\n                this.startIntercepting();\n            }\n        }\n\n        return listener;\n    }\n\n\n    private handleKeyPress = async (key: string) => {\n        if (this.isHandlingKeyPress && key !== CTRL_C) {\n            return;\n        }\n\n        this.isHandlingKeyPress = true;\n\n        try {\n            // We handle the `escape` key here\n            await this.onPress(key.charCodeAt(0) === 127 ? 'ESC' : key);\n        } catch (error) {\n            console.error(error);\n        } finally {\n            this.isHandlingKeyPress = false;\n        }\n    }\n\n    startIntercepting() {\n        if (this.isIntercepting) {\n            return;\n        }\n\n        this.isIntercepting = true;\n        const { stdin } = process;\n\n        if (!stdin.setRawMode) {\n            return;\n        }\n\n        stdin.setRawMode(true);\n        stdin.resume();\n        stdin.setEncoding('utf8');\n        stdin.on('data', this.handleKeyPress)\n    }\n\n    stopIntercepting() {\n        if (!this.isIntercepting) {\n            return;\n        }\n\n        this.isIntercepting = false;\n        const { stdin } = process;\n        stdin.removeListener('data', this.handleKeyPress);\n\n        if (!stdin.setRawMode) {\n            return;\n        }\n\n        stdin.setRawMode(false);\n        stdin.resume();\n    }\n}","export class Registry {\n    constructor(private listener: any) { }\n\n    pause() { this.listener({ pause: true }); }\n    resume() { this.listener({ pause: false }); }\n}","export class Screen {\n    constructor(private name: string) {}\n\n    public handleKeys(key: string): void {}\n    public render(): void {}\n\n    get screenName(): string {\n        return this.name;\n    }\n}","import { CTRL_C, CTRL_D, CTRL_L, ESC, clear } from \"./consts\";\nimport { KeyPressHandler } from \"./keyPressHandler\";\nimport { Registry } from \"./registry\";\nimport { Screen } from \"./screen\";\n\nexport default class UIEngine {\n    private static currentMenu: number = 0; // This tells the system to load the first screen loaded.\n    private static keyHandler: ((key: string) => void);\n    private static screenStack: Screen[] = []; // This is going to be the list of all the screens.\n\n    public static registry: Registry;\n    private static keyPressHandler: KeyPressHandler;\n    private static listener: any;\n\n    public static registerScreen(screen: Screen) {\n        this.screenStack.push(screen);\n    }\n\n    public static registerMainMenu(screen: Screen) {\n        // We will put this at the front of the stack... as it is the one that should load first.\n        this.screenStack.unshift(screen);\n    }\n\n    public static changeScreen(screenPosition: number |  string) {\n        if (typeof screenPosition === \"string\") {\n            // We will loop through the stack and find the screen that matches the name.\n            let foundScreen = this.screenStack.findIndex((screen) => screen.screenName === screenPosition);\n            if (foundScreen === -1) {\n                // We will throw an error as we could not find the screen.\n                throw new Error(`Could not find screen with name: ${screenPosition}`);\n            }\n            // We will now set the screen position to the index of the screen.\n            screenPosition = foundScreen;\n        }\n        this.currentMenu = screenPosition;\n        // We are going to ask the new screen to render.\n        this.display();\n        // We are also going to attach the key handler\n        UIEngine.keyHandler = this.screenStack[screenPosition].handleKeys;\n    }\n\n    public static start() {\n        if (!this.screenStack.length) {\n            throw new Error(\"No screens have been registered.\");;\n        }\n\n        UIEngine.display();\n\n        this.keyPressHandler = new KeyPressHandler(this.handleKeyPress);\n        this.listener = this.keyPressHandler.createInteractionListener();\n        this.registry = new Registry(this.listener);\n        this.keyPressHandler.startIntercepting();\n\n        this.keyHandler = this.screenStack[0].handleKeys;\n\n        this.display();\n    }\n\n    public static display() {\n        clear();\n\n        this.screenStack[this.currentMenu].render();\n    }\n\n    private static async handleKeyPress(key: string) {\n        switch (key) {\n            case CTRL_L:\n                return UIEngine.display();\n            case CTRL_C:\n            case CTRL_D:\n                UIEngine.registry.pause();\n                try {\n                    process.emit('SIGINT');\n                    process.exit()\n                } catch (error) {\n                    throw error;\n                }\n        }\n\n        // We are now going to use the key handler from the current screen.\n        UIEngine.keyHandler(key);\n    }\n}\n\nexport { CTRL_C, CTRL_D, CTRL_L, ESC, Screen, clear };\n"],"mappings":"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","names":[]}